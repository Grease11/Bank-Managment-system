import java.util.Scanner;

class InsufficientFundsException extends Exception {
    public InsufficientFundsException(String message) {
        super(message);
    }
}

class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        balance = initialBalance;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public void withdraw(double amount) throws InsufficientFundsException {
        if (amount > balance) {
            throw new InsufficientFundsException("Insufficient funds to complete the withdrawal.");
        } else {
            balance -= amount;
        }
    }

    public double getBalance() {
        return balance;
    }

\
}

public class BankAccountDemo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the initial balance: $");
        double initialBalance = scanner.nextDouble();
        BankAccount account = new BankAccount(initialBalance);

        while (true) {
            System.out.println("Current Balance: $" + account.getBalance());
            System.out.print("Enter the amount to deposit (or negative to withdraw, 0 to exit): $");
            double amount = scanner.nextDouble();

            if (amount == 0) {
                break;
            }

            if (amount > 0) {
                account.deposit(amount);
                System.out.println("Deposited $" + amount);
            } else {
                try {
                    account.withdraw(Math.abs(amount));
                    System.out.println("Withdrawn $" + Math.abs(amount));
                    System.out.println("Withdrawal successful.");
                } catch (InsufficientFundsException e) {
                    System.out.println(e.getMessage());
                }
            }
        }

        System.out.println("Final Balance: $" + account.getBalance());
        scanner.close();
    }
}
